datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model JobOrder {
  contracts     Contract[]
  createdAt     DateTime            @default(now())
  createdDate   DateTime?
  customer      Customer?           @relation(fields: [customerId], references: [id])
  customerId    String?
  description   String?
  feedbacks     Feedback[]
  id            String              @id @default(cuid())
  procurements  Procurement[]
  scheduledDate DateTime?
  status        EnumJobOrderStatus?
  title         String?
  updatedAt     DateTime            @updatedAt
}

model Customer {
  address          String?
  createdAt        DateTime   @default(now())
  email            String?
  feedbacks        Feedback[]
  id               String     @id @default(cuid())
  jobOrders        JobOrder[]
  name             String?
  phone            String?
  roles            Role[]
  subscriptionDate DateTime?
  updatedAt        DateTime   @updatedAt
}

model Inventory {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  itemName  String?
  location  String?
  quantity  Int?
  updatedAt DateTime @updatedAt
}

model Procurement {
  createdAt   DateTime               @default(now())
  id          String                 @id @default(cuid())
  item        String?
  jobOrder    JobOrder?              @relation(fields: [jobOrderId], references: [id])
  jobOrderId  String?
  orderDate   DateTime?
  quantity    Int?
  receiveDate DateTime?
  status      EnumProcurementStatus?
  supplier    String?
  updatedAt   DateTime               @updatedAt
}

model Feedback {
  comments      String?
  createdAt     DateTime  @default(now())
  customer      Customer? @relation(fields: [customerId], references: [id])
  customerId    String?
  id            String    @id @default(cuid())
  jobOrder      JobOrder? @relation(fields: [jobOrderId], references: [id])
  jobOrderId    String?
  rating        Int?
  submittedDate DateTime?
  updatedAt     DateTime  @updatedAt
}

model Contract {
  contractDetails String?
  createdAt       DateTime  @default(now())
  endDate         DateTime?
  id              String    @id @default(cuid())
  jobOrder        JobOrder? @relation(fields: [jobOrderId], references: [id])
  jobOrderId      String?
  startDate       DateTime?
  updatedAt       DateTime  @updatedAt
}

model User {
  createdAt DateTime @default(now())
  email     String?  @unique
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Permission {
  actions         EnumPermissionActions?
  contractRole    String?
  createdAt       DateTime               @default(now())
  customerRole    String?
  entity          String?
  feedbackRole    String?
  id              String                 @id @default(cuid())
  inventoryRole   String?
  jobOrderRole    String?
  procurementRole String?
  role            Role?                  @relation(fields: [roleId], references: [id])
  roleId          String?
  updatedAt       DateTime               @updatedAt
}

model Role {
  businessAnalyst               String?
  businessManager               String?
  ceo                           String?
  contractsManager              String?
  createdAt                     DateTime     @default(now())
  customer                      Customer?    @relation(fields: [customerId], references: [id])
  customerId                    String?
  customerServiceRepresentative String?
  description                   String?
  id                            String       @id @default(cuid())
  inventoryManager              String?
  name                          String?
  permissions                   Permission[]
  procurementManager            String?
  salesRepresentative           String?
  systemAdministrator           String?
  technician                    String?
  updatedAt                     DateTime     @updatedAt
}

enum EnumJobOrderStatus {
  Option1
}

enum EnumProcurementStatus {
  Option1
}

enum EnumPermissionActions {
  Option1
}
