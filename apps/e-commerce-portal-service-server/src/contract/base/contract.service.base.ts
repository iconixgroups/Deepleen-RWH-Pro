/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Contract as PrismaContract,
  JobOrder as PrismaJobOrder,
} from "@prisma/client";

export class ContractServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ContractCountArgs, "select">): Promise<number> {
    return this.prisma.contract.count(args);
  }

  async contracts<T extends Prisma.ContractFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractFindManyArgs>
  ): Promise<PrismaContract[]> {
    return this.prisma.contract.findMany<Prisma.ContractFindManyArgs>(args);
  }
  async contract<T extends Prisma.ContractFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractFindUniqueArgs>
  ): Promise<PrismaContract | null> {
    return this.prisma.contract.findUnique(args);
  }
  async createContract<T extends Prisma.ContractCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractCreateArgs>
  ): Promise<PrismaContract> {
    return this.prisma.contract.create<T>(args);
  }
  async updateContract<T extends Prisma.ContractUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractUpdateArgs>
  ): Promise<PrismaContract> {
    return this.prisma.contract.update<T>(args);
  }
  async deleteContract<T extends Prisma.ContractDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContractDeleteArgs>
  ): Promise<PrismaContract> {
    return this.prisma.contract.delete(args);
  }

  async getJobOrder(parentId: string): Promise<PrismaJobOrder | null> {
    return this.prisma.contract
      .findUnique({
        where: { id: parentId },
      })
      .jobOrder();
  }
}
