/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Customer as PrismaCustomer,
  Feedback as PrismaFeedback,
  JobOrder as PrismaJobOrder,
  Role as PrismaRole,
} from "@prisma/client";

import { CustomerCreateInput } from "./CustomerCreateInput";
import { Customer } from "./Customer";

export class CustomerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CustomerCountArgs, "select">): Promise<number> {
    return this.prisma.customer.count(args);
  }

  async customers(
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.customer.findMany(args);
  }
  async customer(
    args: Prisma.CustomerFindUniqueArgs
  ): Promise<PrismaCustomer | null> {
    return this.prisma.customer.findUnique(args);
  }
  async createCustomer(
    args: Prisma.CustomerCreateArgs
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.create(args);
  }
  async updateCustomer(
    args: Prisma.CustomerUpdateArgs
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.update(args);
  }
  async deleteCustomer(
    args: Prisma.CustomerDeleteArgs
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.delete(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<PrismaFeedback[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbacks(args);
  }

  async findJobOrders(
    parentId: string,
    args: Prisma.JobOrderFindManyArgs
  ): Promise<PrismaJobOrder[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobOrders(args);
  }

  async findRoles(
    parentId: string,
    args: Prisma.RoleFindManyArgs
  ): Promise<PrismaRole[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .roles(args);
  }
  async AddSubscription(args: CustomerCreateInput): Promise<Customer> {
    throw new Error("Not implemented");
  }
  async CreateSubscription(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ProceedPayment(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ProcessPayment(args: CustomerCreateInput): Promise<Customer> {
    throw new Error("Not implemented");
  }
}
