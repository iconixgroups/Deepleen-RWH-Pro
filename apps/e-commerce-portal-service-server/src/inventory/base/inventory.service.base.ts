/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Inventory as PrismaInventory } from "@prisma/client";

export class InventoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InventoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inventory.count(args);
  }

  async inventories<T extends Prisma.InventoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InventoryFindManyArgs>
  ): Promise<PrismaInventory[]> {
    return this.prisma.inventory.findMany<Prisma.InventoryFindManyArgs>(args);
  }
  async inventory<T extends Prisma.InventoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InventoryFindUniqueArgs>
  ): Promise<PrismaInventory | null> {
    return this.prisma.inventory.findUnique(args);
  }
  async createInventory<T extends Prisma.InventoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InventoryCreateArgs>
  ): Promise<PrismaInventory> {
    return this.prisma.inventory.create<T>(args);
  }
  async updateInventory<T extends Prisma.InventoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InventoryUpdateArgs>
  ): Promise<PrismaInventory> {
    return this.prisma.inventory.update<T>(args);
  }
  async deleteInventory<T extends Prisma.InventoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InventoryDeleteArgs>
  ): Promise<PrismaInventory> {
    return this.prisma.inventory.delete(args);
  }
}
