/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { JobOrder } from "./JobOrder";
import { JobOrderCountArgs } from "./JobOrderCountArgs";
import { JobOrderFindManyArgs } from "./JobOrderFindManyArgs";
import { JobOrderFindUniqueArgs } from "./JobOrderFindUniqueArgs";
import { CreateJobOrderArgs } from "./CreateJobOrderArgs";
import { UpdateJobOrderArgs } from "./UpdateJobOrderArgs";
import { DeleteJobOrderArgs } from "./DeleteJobOrderArgs";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { ProcurementFindManyArgs } from "../../procurement/base/ProcurementFindManyArgs";
import { Procurement } from "../../procurement/base/Procurement";
import { Customer } from "../../customer/base/Customer";
import { JobOrderCreateInput } from "./JobOrderCreateInput";
import { JobOrderService } from "../jobOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobOrder)
export class JobOrderResolverBase {
  constructor(
    protected readonly service: JobOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "read",
    possession: "any",
  })
  async _jobOrdersMeta(
    @graphql.Args() args: JobOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobOrder])
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "read",
    possession: "any",
  })
  async jobOrders(
    @graphql.Args() args: JobOrderFindManyArgs
  ): Promise<JobOrder[]> {
    return this.service.jobOrders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "read",
    possession: "own",
  })
  async jobOrder(
    @graphql.Args() args: JobOrderFindUniqueArgs
  ): Promise<JobOrder | null> {
    const result = await this.service.jobOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobOrder)
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "create",
    possession: "any",
  })
  async createJobOrder(
    @graphql.Args() args: CreateJobOrderArgs
  ): Promise<JobOrder> {
    return await this.service.createJobOrder({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobOrder)
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async updateJobOrder(
    @graphql.Args() args: UpdateJobOrderArgs
  ): Promise<JobOrder | null> {
    try {
      return await this.service.updateJobOrder({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobOrder)
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "delete",
    possession: "any",
  })
  async deleteJobOrder(
    @graphql.Args() args: DeleteJobOrderArgs
  ): Promise<JobOrder | null> {
    try {
      return await this.service.deleteJobOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Contract], { name: "contracts" })
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @graphql.Parent() parent: JobOrder,
    @graphql.Args() args: ContractFindManyArgs
  ): Promise<Contract[]> {
    const results = await this.service.findContracts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Feedback], { name: "feedbacks" })
  @nestAccessControl.UseRoles({
    resource: "Feedback",
    action: "read",
    possession: "any",
  })
  async findFeedbacks(
    @graphql.Parent() parent: JobOrder,
    @graphql.Args() args: FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    const results = await this.service.findFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Procurement], { name: "procurements" })
  @nestAccessControl.UseRoles({
    resource: "Procurement",
    action: "read",
    possession: "any",
  })
  async findProcurements(
    @graphql.Parent() parent: JobOrder,
    @graphql.Args() args: ProcurementFindManyArgs
  ): Promise<Procurement[]> {
    const results = await this.service.findProcurements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: JobOrder
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async CreateJobOrder(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateJobOrder(args);
  }

  @graphql.Mutation(() => JobOrder)
  async InitiateJobOrder(
    @graphql.Args()
    args: JobOrderCreateInput
  ): Promise<JobOrder> {
    return this.service.InitiateJobOrder(args);
  }
}
