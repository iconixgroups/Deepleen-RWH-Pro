/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { JobOrderService } from "../jobOrder.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { JobOrderCreateInput } from "./JobOrderCreateInput";
import { JobOrder } from "./JobOrder";
import { JobOrderFindManyArgs } from "./JobOrderFindManyArgs";
import { JobOrderWhereUniqueInput } from "./JobOrderWhereUniqueInput";
import { JobOrderUpdateInput } from "./JobOrderUpdateInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { FeedbackWhereUniqueInput } from "../../feedback/base/FeedbackWhereUniqueInput";
import { ProcurementFindManyArgs } from "../../procurement/base/ProcurementFindManyArgs";
import { Procurement } from "../../procurement/base/Procurement";
import { ProcurementWhereUniqueInput } from "../../procurement/base/ProcurementWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class JobOrderControllerBase {
  constructor(
    protected readonly service: JobOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobOrder })
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createJobOrder(
    @common.Body() data: JobOrderCreateInput
  ): Promise<JobOrder> {
    return await this.service.createJobOrder({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        createdDate: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        scheduledDate: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [JobOrder] })
  @ApiNestedQuery(JobOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async jobOrders(@common.Req() request: Request): Promise<JobOrder[]> {
    const args = plainToClass(JobOrderFindManyArgs, request.query);
    return this.service.jobOrders({
      ...args,
      select: {
        createdAt: true,
        createdDate: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        scheduledDate: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async jobOrder(
    @common.Param() params: JobOrderWhereUniqueInput
  ): Promise<JobOrder | null> {
    const result = await this.service.jobOrder({
      where: params,
      select: {
        createdAt: true,
        createdDate: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        scheduledDate: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateJobOrder(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() data: JobOrderUpdateInput
  ): Promise<JobOrder | null> {
    try {
      return await this.service.updateJobOrder({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          createdDate: true,

          customer: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          scheduledDate: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteJobOrder(
    @common.Param() params: JobOrderWhereUniqueInput
  ): Promise<JobOrder | null> {
    try {
      return await this.service.deleteJobOrder({
        where: params,
        select: {
          createdAt: true,
          createdDate: true,

          customer: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          scheduledDate: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: JobOrderWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        contractDetails: true,
        createdAt: true,
        endDate: true,
        id: true,

        jobOrder: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async connectContracts(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async updateContracts(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async disconnectContracts(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/feedbacks")
  @ApiNestedQuery(FeedbackFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Feedback",
    action: "read",
    possession: "any",
  })
  async findFeedbacks(
    @common.Req() request: Request,
    @common.Param() params: JobOrderWhereUniqueInput
  ): Promise<Feedback[]> {
    const query = plainToClass(FeedbackFindManyArgs, request.query);
    const results = await this.service.findFeedbacks(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        jobOrder: {
          select: {
            id: true,
          },
        },

        rating: true,
        submittedDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async connectFeedbacks(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        connect: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async updateFeedbacks(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        set: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/feedbacks")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async disconnectFeedbacks(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        disconnect: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/procurements")
  @ApiNestedQuery(ProcurementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Procurement",
    action: "read",
    possession: "any",
  })
  async findProcurements(
    @common.Req() request: Request,
    @common.Param() params: JobOrderWhereUniqueInput
  ): Promise<Procurement[]> {
    const query = plainToClass(ProcurementFindManyArgs, request.query);
    const results = await this.service.findProcurements(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        item: true,

        jobOrder: {
          select: {
            id: true,
          },
        },

        orderDate: true,
        quantity: true,
        receiveDate: true,
        status: true,
        supplier: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/procurements")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async connectProcurements(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: ProcurementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      procurements: {
        connect: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/procurements")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async updateProcurements(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: ProcurementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      procurements: {
        set: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/procurements")
  @nestAccessControl.UseRoles({
    resource: "JobOrder",
    action: "update",
    possession: "any",
  })
  async disconnectProcurements(
    @common.Param() params: JobOrderWhereUniqueInput,
    @common.Body() body: ProcurementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      procurements: {
        disconnect: body,
      },
    };
    await this.service.updateJobOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/create-job-order")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateJobOrder(
    @common.Body()
    body: JobOrderCreateInput
  ): Promise<string> {
    return this.service.CreateJobOrder(body);
  }

  @common.Post("/joborder/initiate")
  @swagger.ApiOkResponse({
    type: JobOrder,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async InitiateJobOrder(
    @common.Body()
    body: JobOrderCreateInput
  ): Promise<JobOrder> {
    return this.service.InitiateJobOrder(body);
  }
}
