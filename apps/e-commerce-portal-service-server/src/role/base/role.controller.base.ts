/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RoleService } from "../role.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RoleCreateInput } from "./RoleCreateInput";
import { Role } from "./Role";
import { RoleFindManyArgs } from "./RoleFindManyArgs";
import { RoleWhereUniqueInput } from "./RoleWhereUniqueInput";
import { RoleUpdateInput } from "./RoleUpdateInput";
import { PermissionFindManyArgs } from "../../permission/base/PermissionFindManyArgs";
import { Permission } from "../../permission/base/Permission";
import { PermissionWhereUniqueInput } from "../../permission/base/PermissionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RoleControllerBase {
  constructor(
    protected readonly service: RoleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Role })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRole(@common.Body() data: RoleCreateInput): Promise<Role> {
    return await this.service.createRole({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        businessAnalyst: true,
        businessManager: true,
        ceo: true,
        contractsManager: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        customerServiceRepresentative: true,
        description: true,
        id: true,
        inventoryManager: true,
        name: true,
        procurementManager: true,
        salesRepresentative: true,
        systemAdministrator: true,
        technician: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Role] })
  @ApiNestedQuery(RoleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async roles(@common.Req() request: Request): Promise<Role[]> {
    const args = plainToClass(RoleFindManyArgs, request.query);
    return this.service.roles({
      ...args,
      select: {
        businessAnalyst: true,
        businessManager: true,
        ceo: true,
        contractsManager: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        customerServiceRepresentative: true,
        description: true,
        id: true,
        inventoryManager: true,
        name: true,
        procurementManager: true,
        salesRepresentative: true,
        systemAdministrator: true,
        technician: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Role })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async role(
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<Role | null> {
    const result = await this.service.role({
      where: params,
      select: {
        businessAnalyst: true,
        businessManager: true,
        ceo: true,
        contractsManager: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        customerServiceRepresentative: true,
        description: true,
        id: true,
        inventoryManager: true,
        name: true,
        procurementManager: true,
        salesRepresentative: true,
        systemAdministrator: true,
        technician: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Role })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRole(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() data: RoleUpdateInput
  ): Promise<Role | null> {
    try {
      return await this.service.updateRole({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          businessAnalyst: true,
          businessManager: true,
          ceo: true,
          contractsManager: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          customerServiceRepresentative: true,
          description: true,
          id: true,
          inventoryManager: true,
          name: true,
          procurementManager: true,
          salesRepresentative: true,
          systemAdministrator: true,
          technician: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Role })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRole(
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<Role | null> {
    try {
      return await this.service.deleteRole({
        where: params,
        select: {
          businessAnalyst: true,
          businessManager: true,
          ceo: true,
          contractsManager: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          customerServiceRepresentative: true,
          description: true,
          id: true,
          inventoryManager: true,
          name: true,
          procurementManager: true,
          salesRepresentative: true,
          systemAdministrator: true,
          technician: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/permissions")
  @ApiNestedQuery(PermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "read",
    possession: "any",
  })
  async findPermissions(
    @common.Req() request: Request,
    @common.Param() params: RoleWhereUniqueInput
  ): Promise<Permission[]> {
    const query = plainToClass(PermissionFindManyArgs, request.query);
    const results = await this.service.findPermissions(params.id, {
      ...query,
      select: {
        actions: true,
        contractRole: true,
        createdAt: true,
        customerRole: true,
        entity: true,
        feedbackRole: true,
        id: true,
        inventoryRole: true,
        jobOrderRole: true,
        procurementRole: true,

        role: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/permissions")
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "update",
    possession: "any",
  })
  async connectPermissions(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: PermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissions: {
        connect: body,
      },
    };
    await this.service.updateRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/permissions")
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "update",
    possession: "any",
  })
  async updatePermissions(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: PermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissions: {
        set: body,
      },
    };
    await this.service.updateRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/permissions")
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "update",
    possession: "any",
  })
  async disconnectPermissions(
    @common.Param() params: RoleWhereUniqueInput,
    @common.Body() body: PermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      permissions: {
        disconnect: body,
      },
    };
    await this.service.updateRole({
      where: params,
      data,
      select: { id: true },
    });
  }
}
