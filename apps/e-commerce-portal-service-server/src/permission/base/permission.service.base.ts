/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Permission as PrismaPermission,
  Role as PrismaRole,
} from "@prisma/client";

export class PermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.permission.count(args);
  }

  async permissions(
    args: Prisma.PermissionFindManyArgs
  ): Promise<PrismaPermission[]> {
    return this.prisma.permission.findMany(args);
  }
  async permission(
    args: Prisma.PermissionFindUniqueArgs
  ): Promise<PrismaPermission | null> {
    return this.prisma.permission.findUnique(args);
  }
  async createPermission(
    args: Prisma.PermissionCreateArgs
  ): Promise<PrismaPermission> {
    return this.prisma.permission.create(args);
  }
  async updatePermission(
    args: Prisma.PermissionUpdateArgs
  ): Promise<PrismaPermission> {
    return this.prisma.permission.update(args);
  }
  async deletePermission(
    args: Prisma.PermissionDeleteArgs
  ): Promise<PrismaPermission> {
    return this.prisma.permission.delete(args);
  }

  async getRole(parentId: string): Promise<PrismaRole | null> {
    return this.prisma.permission
      .findUnique({
        where: { id: parentId },
      })
      .role();
  }
}
